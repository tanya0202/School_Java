<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

<style>
  .darkmode{
    border-radius: 50%;
    background-color: #EDEDED;
    color:black;
  }
  .lightmode{
    border-radius: 50%;
    background-color: black;
    color:white;
  }
.top{
height:80px;

border:1px solid black;
}
.nav{
height:47px;
background-color:#19C526;
border:1px solid black;
}
.menu{

width:250px;
height:900px;

border:1px solid black;
}
.main{
margin-top:-900px;
margin-left:250px;
width:1270px;
/* height:12500px;*/


border:1px solid black;
}
.java1{
text-decoration:underline;
color: blue;
}
.java2{
text-decoration:none;
color: black;
}
.p1,.p2,.p3,.p4,.p5,.p6,.p7,.p8,.p9,.p10,.p11,.p12,.p13,.p14,.p15,.p16,.p17,.p18{
display:none;
margin-left:10px;
}
.blue {
  background-color: white;
}
i{
  color:red;
}
p{
  margin-left:10px;
}
div.scroll {
                margin-top:10px;
                margin-left:10px;
                padding:4px;
                background-color: black;
                color:white;
                height:300px;
                width:1000px;
                overflow-x: hidden;
                overflow-x: auto;
                overflow-y: hidden;
                overflow-y: auto;
                text-align:justify;
                border:1px solid black;
            }
div.scroll1 {
                margin-top:10px;
                margin-left:10px;
                padding:4px;
                background-color: black;
                color:white;
                height:150px;
                width:1000px;
                overflow-x: hidden;
                overflow-x: auto;
                overflow-y: hidden;
                overflow-y: auto;
                text-align:justify;
                border:1px solid black;
            }
div.scroll2 {
                margin-top:10px;
                margin-left:10px;
                padding:4px;
                background-color: black;
                color:white;
                height:50px;
                width:1000px;
                overflow-x: hidden;
                overflow-x: auto;
                overflow-y: hidden;
                overflow-y: auto;
                text-align:justify;
                border:1px solid black;
            }            
unmark{
  margin-left:10px;  
}            
</style>
<meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
 <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
  <script src="JavaSchool.js"></script>
 <script>
$(function(){
$("#b1").click(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p1").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b2").click(function(){
$(".p1").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p2").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b3").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p3").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b4").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p4").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b5").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p5").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b6").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p6").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b7").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p7").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b8").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p8").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b9").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p9").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b10").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p10").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b11").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p11").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b12").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p12").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b13").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p13").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b14").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p14").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b15").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p15").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b16").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p17").hide(function(){
$(".p18").hide(function(){
$(".p16").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b17").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p18").hide(function(){
$(".p17").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })
$("#b18").click(function(){
$(".p1").hide(function(){
$(".p2").hide(function(){
$(".p3").hide(function(){
$(".p4").hide(function(){
$(".p5").hide(function(){
$(".p6").hide(function(){
$(".p7").hide(function(){
$(".p8").hide(function(){
$(".p9").hide(function(){
$(".p10").hide(function(){
$(".p11").hide(function(){
$(".p12").hide(function(){
$(".p13").hide(function(){
$(".p14").hide(function(){
$(".p15").hide(function(){
$(".p16").hide(function(){
$(".p17").hide(function(){
$(".p18").show("fast");
}) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) }) })




$("#x1").hover(function(){
  $(this).toggleClass("blue");
})
$("#x2").hover(function(){
  $(this).toggleClass("blue");
})
$("#x3").hover(function(){
  $(this).toggleClass("blue");
})
$("#x4").hover(function(){
  $(this).toggleClass("blue");
})
$(".darkmode").click(function(){
  $(".scroll,.scroll1,.scroll2 ").css({"background-color": "#EDEDED", "color": "black"});
})
$(".lightmode").click(function(){
  $(".scroll,.scroll1,.scroll2 ").css({"background-color": "black", "color": "white"});
})
})

</script>
</head>
<body>
  <div class="top"></div> 
  <nav class="navbar navbar-expand-lg navbar-light bg-success">
 
<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

 
  <ul class="navbar-nav mr-auto">
     
     
      <li class="nav-item dropdown">
        <a id="x1" class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          TUTORIALS
        </a>
        <div class="dropdown-menu alert alert-dismissible" aria-labelledby="navbarDropdown">
<button type="button" class="close" data-dismiss="alert">&times;</button>
<p class="dropdown-item" justify-content-center><h5>HTML AND CSS</h5></p>
          <a class="dropdown-item" href="#">learn HTML</a>
          <a class="dropdown-item" href="#">learn CSS</a>
          <a class="dropdown-item" href="#">learn BootStrap</a>
        </div>
      </li>
     
 <li class="nav-item dropdown">
        <a id="x2" class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          REFERENCES
        </a>
        <div class="dropdown-menu alert alert-dismissible" aria-labelledby="navbarDropdown">
<button type="button" class="close" data-dismiss="alert">&times;</button>
<p class="dropdown-item" justify-content-center><h5>HTML</h5></p>
          <a class="dropdown-item" href="#">html tag reference</a>
          <a class="dropdown-item" href="#">html event reference</a>
          <a class="dropdown-item" href="#">html color reference</a>
        </div>
      </li>

<li class="nav-item dropdown">
        <a id="x3" class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          EXAMPLES
        </a>
        <div class="dropdown-menu alert alert-dismissible" aria-labelledby="navbarDropdown">
<button type="button" class="close" data-dismiss="alert">&times;</button>
<p class="dropdown-item" justify-content-center><h5>HTML</h5></p>
          <a class="dropdown-item" href="#">html tag reference</a>
          <a class="dropdown-item" href="#">html event reference</a>
          <a class="dropdown-item" href="#">html color reference</a>
        </div>
      </li>

<li class="nav-item dropdown">
        <a id="x4" class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          EXERCISES
        </a>
        <div class="dropdown-menu alert alert-dismissible" aria-labelledby="navbarDropdown">
<button type="button" class="close" data-dismiss="alert">&times;</button>
<p class="dropdown-item" justify-content-center><h5>HTML</h5></p>
          <a class="dropdown-item" href="#">html tag reference</a>
          <a class="dropdown-item" href="#">html event reference</a>
          <a class="dropdown-item" href="#">html color reference</a>
        </div>
      </li>

    </ul>  
    <form class="form-inline my-lg-0">
      <ul>
        <button title="Toggle Light Mode" class="darkmode">Light</button>
        <button title="Toggle Dark Mode" class="lightmode">Dark</button>
      <input class="form-control " type="search" placeholder="Search" >
      <button class="btn btn-outline-success " type="submit" style="color:black">Search</button>
    </ul>
    </form>

  </div>
</nav> 
<div class="menu" >
<div class="list-group">
    <a href="#" id="b1" class="list-group-item list-group-item-action">Introduction To Java</a>
    <a href="#" id="b2" class="list-group-item list-group-item-action">Identifiers</a>
    <a href="#" id="b3" class="list-group-item list-group-item-action">Keywords</a>
    <a href="#" id="b4" class="list-group-item list-group-item-action">Java Data Types</a>
    <a href="#" id="b5" class="list-group-item list-group-item-action">Operators</a>
<a href="#" id="b6" class="list-group-item list-group-item-action">Constructors</a>
<a href="#" id="b7" class="list-group-item list-group-item-action">Command Line Arguments</a>
<a href="#" id="b8" class="list-group-item list-group-item-action">Arrays</a>
<a href="#" id="b9" class="list-group-item list-group-item-action">Classes And Objects</a>
<a href="#" id="b10" class="list-group-item list-group-item-action">Inheritance</a>
<a href="#" id="b11" class="list-group-item list-group-item-action">Abstract methods and Classes</a>
<a href="#" id="b12" class="list-group-item list-group-item-action">Packages</a>
<a href="#" id="b13" class="list-group-item list-group-item-action">Interfaces</a>
<a href="#" id="b14" class="list-group-item list-group-item-action">Strings</a>
<a href="#" id="b15" class="list-group-item list-group-item-action">Exception Handling</a>
<a href="#" id="b16" class="list-group-item list-group-item-action">Multithreading</a>
<a href="#" id="b17" class="list-group-item list-group-item-action">Generics</a>
<a href="#" id="b18" class="list-group-item list-group-item-action">Miscellaneous Examples</a>


  </div>
</div>
<div class="main">
<p class="p1">
  <b><i>What is Java?</i></b><br>
Java is a programming language and a platform. Java is a high level, robust, object-oriented and secure programming language.<br>
<br>
Java was developed by Sun Microsystems (which is now the subsidiary of Oracle) in the year 1995. James Gosling is known as the father of Java. Before Java, its name was Oak. Since Oak was already a registered company, so James Gosling and his team changed the Oak name to Java.<br>
<br>
<b>Platform:</b> Any hardware or software environment in which a program runs, is known as a platform. Since Java has a runtime environment (JRE) and API, it is called a platform.<br>
<br>
<i>Application</i>
According to Sun, 3 billion devices run Java. There are many devices where Java is currently used. Some of them are as follows:<br>
<br>
1.Desktop Applications such as acrobat reader, media player, antivirus, etc.<br>
2.Web Applications such as irctc.co.in, javatpoint.com, etc.<br>
3.Enterprise Applications such as banking applications.<br>
4.Mobile<br>
5.Embedded System<br>
6.Smart Card<br>
7.Robotics<br>
8.Games, etc.<br>
<br>
<i>Relationship with C and C++</i><br>
Java is directly related to both C and C++. Java inherits its syntax from C. Its object model is adapted from C++. Java’s relationship with C and C++ is important for several reasons. First, many programmers are familiar with the C/C++ syntax. This makes it easy for a C/C++ programmer to learn Java and, conversely, for a Java programmer to learn C/C++.<br>
<br>
<br>
﻿

Second, Java’s designers did not “reinvent the wheel.” Instead, they further refined an already highly successful programming paradigm. The modern age of programming began with C. It moved to C++, and now to Java. By inheriting and building upon that rich heritage, Java provides a powerful, logically consistent programming environment that takes the best of the past and adds new features required by the online environment. Perhaps most important, because of their similarities, C, C++, and Java define a common, conceptual framework for the professional programmer. Programmers do not face major rifts when switching from one language to another.<br>


<br>
<br>
One of the central design philosophies of both C and C++ is that the programmer is in charge! Java also inherits this philosophy. Except for those constraints imposed by the Internet environment, Java gives you, the programmer, full control. If you program well, your programs reflect it. If you program poorly, your programs reflect that, too. Put differently, Java is not a language with training wheels. It is a language for professional programmers. Java has one other attribute in common with C and C++: it was designed, tested, and refined by real, working programmers. It is a language grounded in the needs and experiences of the people who devised it. There is no better way to produce a top-flight professional programming language.<br>
<br>

<i>Features of JAVA</i><br>

No overview of Java is complete without a look at the Java buzzwords. Although the fundamental forces that necessitated the invention of Java are portability and security, other factors played an important role in molding the final form of the language. The key considerations were summed up by the Java design team in the following list of buzzwords.﻿<br>

<u><b>Simple:</b></u> Java has a concise, cohesive set of features that makes it easy to learn and use. Java was designed to be easy for the professional programmer to learn and use effectively.<br>

<u><b>Secure:</b></u> Java provides a secure means of creating Internet applications. As you are likely aware, every time that you download a “normal” program, you are risking a viral infection. When you use a Java-compatible Web browser, you can safely download Java applets without fear of viral infection or malicious intent.<br>

<u><b>Portable:</b></u> Java programs can execute in any environment for which there is a Java run-time system. Many types of computers and operating systems are in use throughout the world i.e. Windows, MacOS, Ubuntu etc. and many are connected to the Internet. For programs to be dynamically downloaded to all the various types of platforms connected to the Internet, some means of generating portable executable code is needed.<br>

<u><b>Object-oriented:</b></u> Java embodies the modern, object-oriented programming philosophy. Like C++, Java can support an object-oriented approach to writing software.<br>

<u><b>Robust:</b></u> Java encourages error-free programming by being strictly typed and performing run-time checks. The ability to create robust programs was given a high priority in the design of Java.<br>

<u><b>Multithreaded:</b></u> Java provides integrated support for multithreaded programming. Java was designed to meet the real-world requirement of creating interactive, networked programs.<br>

<u><b>High performance:</b></u> The Java bytecode is highly optimized for speed of execution. The Java bytecode was carefully designed so that it would be easy to translate directly into native machine code for very high performance by using a just-in-time compiler.<br>

<u><b>Distributed:</b></u> Java was designed with the distributed environment of the Internet in mind. Java is designed for the distributed environment of the Internet, because it handles TCP/IP protocols. In fact, accessing a resource using a URL is not much different from accessing a file. This allowed objects on two different computers to execute procedures remotely. Java revived these interfaces in a package called Remote Method Invocation (RMI).<br>

<u><b>Dynamic:</b></u> Java programs carry with them substantial amounts of run-time type information that is used to verify and resolve accesses to objects at run time. Java programs carry with them substantial amounts of run-time type information that is used to verify and resolve accesses to objects at run time. This makes it possible to dynamically link code in a safe and expedient manner.
</p>


<p class="p2">
<b><font size="8%"><u><b>Java Identifiers</b></u></font></b><br><br>
In programming languages, identifiers are used for identification purpose.
 In Java, an identifier can be a class name, method name, variable name or a label. For example :<br><br>
<div style="height:180px;width:550px;background-color:black;alignment:center;"><font color="white">public class Test<br>
{<br>
&nbsp&nbsp&nbsp    public static void main(String[] args)<br>
&nbsp&nbsp&nbsp&nbsp&nbsp    {<br>
 &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp       int a = 20;<<br>
  &nbsp&nbsp&nbsp&nbsp&nbsp   }<br>
}<br></font></div>
<br>
In the above java code, we have 5 identifiers namely :<br>
<ul>
<li><b>Test</b> : class name.</li>
<li><b>main</b> : method name.</li>
<li><b>String </b>: predefined class name.</li>
<li><b>args</b> : variable name.</li>
<li><b>a </b>:  variable name.</li>
</ul>
<br>
<font size="5%"><b><u>Rules for defining Java Identifiers</u></b></font><br>
<br>
There are certain rules for defining a valid java identifier. 
These rules must be followed, otherwise we get compile-time error. These rules are also valid for other languages like C,C++.<br>
<ul>
<li>The only allowed characters for identifiers are all 
alphanumeric characters<strong>([A-Z],[a-z],[0-9])</strong>, ‘$‘(dollar sign) and ‘_‘ (underscore).
For example “geek@” is not a valid java identifier as it contain ‘@’ special character.</li>

<li>Identifiers should not start with digits<strong>([0-9])</strong>. For example “123geeks” is a not a valid java identifier.</li>

<li>Java identifiers are <strong>case-sensitive</strong>.</li>
<li>There is no limit on the length of the identifier 
but it is advisable to use an optimum length of 4 – 15 letters only.</li>
<li>Reserved Words can’t be used as an identifier.
 For example “int while = 20;” is an invalid statement as while is a <strong>reserved word</strong>. 
There are <strong>53 </strong>reserved words in Java.</li>
</ul>
<br>
<font size="5%"><u><b>Examples of valid identifiers :</b></u></font><br>
<br>
<div style="height:250px;width:550px;background-color:black;">
<font color="white">MyVariable<br>
MYVARIABLE<br>
myvariable<br>
x<br>
i<br>
x1<br>
i1<br>
_myvariable<br>
$myvariable<br>
sum_of_array<br>
geeks123<br></font>
</div>
<br>
<font size="5%"><u><b> Examples of invalid identifiers :</b></u></font><br>
<br>
<div style="height:150px;width:550px;background-color:black;">
<font color="white">My Variable &nbsp&nbsp&nbsp  // contains a space<br>
123geeks   &nbsp&nbsp&nbsp // Begins with a digit<br>
a+c &nbsp&nbsp&nbsp // plus sign is not an alphanumeric character<br>
variable-2 &nbsp&nbsp&nbsp // hyphen is not an alphanumeric character<br>
sum_&_difference &nbsp&nbsp&nbsp  // ampersand is not an alphanumeric character<br></font> 
</div><br>
<br>
<font size="5%"><b><u>Reserved Words</u></b></font><br>
<br>
Any programming language reserves some words to represent functionalities defined by that language. 
These words are called reserved words.They can be briefly categorised into two parts : <strong>keywords(50)</strong> and <strong>literals(3)</strong>.<br>
<br>
Keywords define functionalities and literals defines a value.<br><br>
Identifiers are used by symbol tables in various analyzing phases(like lexical,syntax,semantic) of a compiler architecture.<br>
<br>
<b>Note :</b> The keywords const and goto are reserved, even though they are not currently used. In place of const, final keyword is used.
 Some keywords like strictfp are included in later versions of Java.<br>
</p>


<p class="p3">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 3 Baar</p>
<p class="p4">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 4 Baar</p>
<p class="p5">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 5 Baar</p>
<unmark class="p6">
<p><i><b>Constructors in Java</b></i><br>
In Java, a constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory.<br>Every time an object is created using the new() keyword, at least one constructor is called.<br><br><br>
<b >Example:</b><br></p>
<div class="scroll">
 &nbsp&nbsp&nbsp&nbsp // Create a MyClass class<br>
public class MyClass {<br>
  &nbsp&nbsp&nbsp&nbsp int x;  // Create a class attribute<br><br>

  // Create a class constructor for the MyClass class<br>
  public MyClass() {<br>
 &nbsp&nbsp&nbsp&nbsp   x = 5;  // Set the initial value for the class attribute x<br>
 &nbsp&nbsp&nbsp }<br><br>

 &nbsp&nbsp&nbsp public static void main(String[] args) {<br>
  &nbsp&nbsp&nbsp&nbsp  MyClass myObj = new MyClass(); // Create an object of class MyClass (This will call the constructor)<br>
  &nbsp&nbsp&nbsp&nbsp  System.out.println(myObj.x); // Print the value of x<br>
 &nbsp&nbsp&nbsp }<br>
}<br>

// Outputs 5
</div><br><br><br>
<i><b>Rules for creating Java constructor</b></i><br>
There are two rules defined for the constructor.<br><br>

1.&nbspConstructor name must be the same as its class name<br>
2.&nbspA Constructor must have no explicit return type<br>
3.&nbspA Java constructor cannot be abstract, static, final, and synchronized<br><br><br>
<i><b>Types of Java constructors</b></i><br><br>
There are two types of constructors in Java:<br><br>

1.&nbspDefault constructor (no-arg constructor)<br>
2.&nbspParameterized constructor<br><br><br>
<i><b>Java Default Constructor</b></i><br>
A constructor is called "Default Constructor" when it doesn't have any parameter.<br><br>
<b>Example of default constructor</b><br>
In this example, we are creating the no-arg constructor in the Bike class. It will be invoked at the time of object creation.
<div class="scroll1">
  //Java Program to create and call a default constructor <br>
class Bike1{  <br>
//creating a default constructor  <br>
Bike1(){System.out.println("Bike is created");}<br>  
//main method  <br>
public static void main(String args[]){  <br>
//calling a default constructor  <br>
Bike1 b=new Bike1();<br>  
}  
}  
</div><br><br>
OUTPUT:<br>
<div class="scroll2">
  Bike is created
</div><br><br>
<i><b>Java Parameterized Constructor</b></i><br>
A constructor which has a specific number of parameters is called a parameterized constructor.<br><br>

Why use the parameterized constructor?<br>
The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.<br><br>

<b>Example of parameterized constructor</b><br>
In this example, we have created the constructor of Student class that have two parameters. We can have any number of parameters in the constructor.<br><br>
<div class="scroll">
  //Java Program to demonstrate the use of the parameterized constructor.  <br>
class Student4{  <br>
    int id;  <br>
    String name; <br>
    //creating a parameterized constructor  <br>
    Student4(int i,String n){  <br>
    id = i;  <br>
    name = n;  <br>
    }  <br>
    //method to display the values  <br>
    void display(){System.out.println(id+" "+name);}  <br><br>
   
    public static void main(String args[]){  <br>
    //creating objects and passing values  <br>
    Student4 s1 = new Student4(111,"Karan");  <br>
    Student4 s2 = new Student4(222,"Aryan");  <br>
    //calling method to display the values of object<br>  
    s1.display();<br>  
    s2.display();  <br>
   }  <br>
}  
</div><br>
Output:
<br><br>
<div class="scroll2">111 Karan<br>
222 Aryan</div><br><br>
<i><b>Constructor Overloading in Java</b></i><br>
In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods.<br><br>

Constructor overloading in Java is a technique of having more than one constructor with different parameter lists. They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types.<br><br>

<b>Example of Constructor Overloading</b><br>
<div class="scroll">
  &nbspclass Student5{<br>  
  &nbsp&nbsp  int id;  <br>
  &nbsp&nbsp  String name;  <br>
  &nbsp&nbsp  int age;  <br>
  &nbsp&nbsp  //creating two arg constructor  <br>
  &nbsp&nbsp  Student5(int i,String n){  <br>
  &nbsp&nbsp  id = i;  <br>
  &nbsp&nbsp  name = n;  <br>
  &nbsp&nbsp  }  <br>
  &nbsp&nbsp  //creating three arg constructor  <br>
  &nbsp&nbsp  Student5(int i,String n,int a){  <br>
  &nbsp&nbsp  id = i;  <br>
  &nbsp&nbsp  name = n;  <br>
  &nbsp&nbsp  age=a;  <br>
  &nbsp&nbsp  }  <br>
  &nbsp&nbsp  void display(){System.out.println(id+" "+name+" "+age);}  <br><br>
   
  &nbsp&nbsp  public static void main(String args[]){  <br>
  &nbsp&nbsp  Student5 s1 = new Student5(111,"Karan");  <br>
  &nbsp&nbsp  Student5 s2 = new Student5(222,"Aryan",25);  <br>
  &nbsp&nbsp  s1.display();  <br>
  &nbsp&nbsp  s2.display();  <br>
  &nbsp }  <br>
} </div>
Output:<br><br>
<div class="scroll2">
111 Karan 0<br>
222 Aryan 25<br>
</div>
</unmark>

<p class="p7">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 7 Baar</p>
<p class="p8">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 8 Baar</p>
<p class="p9">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 9 Baar</p>
<p class="p10">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 10 Baar</p>
<p class="p11">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 11 Baar</p>
<p class="p12">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 12 Baar</p>
<p class="p13">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 13 Baar</p>
<p class="p14">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 14 Baar</p>
<p class="p15">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 15 Baar</p>
<p class="p16">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 16 Baar</p>
<p class="p17">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 17 Baar</p>
<p class="p18">Kuch Toh Kaam Karle.Kamse Kam Content Hee Add Karle 18 Baar</p>










</body>
</html>